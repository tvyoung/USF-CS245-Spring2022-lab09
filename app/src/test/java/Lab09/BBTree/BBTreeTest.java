/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Lab09.BBTree;

import org.junit.Test;

import static org.junit.Assert.*;

public class BBTreeTest {
    @Test
    public void emptyTreeTest() {
        BBTree bt = new BBTree();
        assertNull(null, bt.root);
    }

    @Test
    public void checkNullArrayTest() {
        BBTree bt = new BBTree();
        assertThrows(NullPointerException.class, () -> bt.addAll(null));
    }

    @Test public void oneNodeTest() {
        BBTree bt = new BBTree();
        BBTree.TreeNode node = bt.new TreeNode(1);
        assertEquals(1, node.data);
    }

    @Test public void oneNodeTwoEmptyChildrenTest() {
        BBTree bt = new BBTree();
        BBTree.TreeNode node = bt.new TreeNode(1);
        assertEquals(null, node.left, node.right);
    }

    @Test
    public void sizeTest1() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(15, bt.size);
    }

    @Test
    public void checkTreeDepthTest1() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(3, bt.depthOfTree());
    }

    @Test
    public void checkIsLeafTest1() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertFalse(bt.isLeaf(bt.root));
    }

    @Test
    public void checkSecretNumberTest1() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(93, bt.revealSecretNumber());
    }

    @Test
    public void checkAllValidNumsTest1() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        String resArr = "[1110, 1111, 1101, 1100, 1010, 1011, 1001, 1001]";
        assertEquals(resArr, bt.allValidNums().toString());
    }

    @Test
    public void sizeTest2() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0};
        bt.addAll(array);
        assertEquals(5, bt.size);
    }

    @Test
    public void checkTreeDepthTest2() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0};
        bt.addAll(array);
        assertEquals(2, bt.depthOfTree());
    }

    @Test
    public void checkSecretNumberTest2() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0};
        bt.addAll(array);
        assertEquals(15, bt.revealSecretNumber());
    }

    @Test
    public void checkAllValidNumsTest2() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0};
        bt.addAll(array);
        String resArr = "[111, 110, 10]";
        assertEquals(resArr, bt.allValidNums().toString());
    }

    @Test
    public void sizeTest3() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(13, bt.size);
    }

    @Test
    public void checkTreeDepthTest3() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(3, bt.depthOfTree());
    }

    @Test
    public void checkSecretNumberTest3() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1};
        bt.addAll(array);
        assertEquals(81, bt.revealSecretNumber());
    }

    @Test
    public void checkAllValidNumsTest3() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1};
        bt.addAll(array);
        String resArr = "[1110, 1111, 1100, 1101, 1011, 1011, 101]";
        assertEquals(resArr, bt.allValidNums().toString());
    }

    @Test
    public void checkIsValidNumberTest4() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertFalse(bt.isValidNumber("0"));
    }

    @Test
    public void checkIsValidNumberTest5() {
        BBTree bt = new BBTree();
        int[] array = {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1};
        bt.addAll(array);
        assertTrue(bt.isValidNumber("1110"));
    }
}
